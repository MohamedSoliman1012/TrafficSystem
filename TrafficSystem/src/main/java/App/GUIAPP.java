package App;

// Yo, this is the main GUI app for the traffic system, all the UI stuff goes here

import dao.PoliceDAO;
import dao.VehicleDAO;
import dao.DatabaseConnection;
import dao.PersonDAO;
import com.AavengersTrafficControle.trafficsystem.model.Police;
import com.AavengersTrafficControle.trafficsystem.model.Driver;
import com.AavengersTrafficControle.trafficsystem.model.Person;
import com.AavengersTrafficControle.trafficsystem.model.Vehicle;
import com.AavengersTrafficControle.trafficsystem.model.Report;
import java.sql.Connection;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Graphics;
import java.awt.Color;
import javax.swing.ImageIcon;

/**
 *
 * @author 
 */
public class GUIAPP extends javax.swing.JFrame {

    private final PoliceDAO policeDAO;
    private final VehicleDAO vehicleDAO = new VehicleDAO();
    private final PersonDAO personDAO = new PersonDAO();
    private java.util.function.Consumer<Police> onLoginSuccess;

    private javax.swing.JPanel mainMenuPanel;
    private javax.swing.JButton searchVehicleButton;
    private javax.swing.JButton searchPersonButton;
    private javax.swing.JButton createReportButton;
    private javax.swing.JButton viewMyReportsButton;
    private javax.swing.JButton viewAllReportsButton;
    private javax.swing.JButton logoutButton;
    private javax.swing.JButton searchVehicleByQRCodeButton;
    private javax.swing.JButton searchPersonByQRCodeButton;

    ImageIcon AddS = new ImageIcon("background.jpg"); 
    final Image Adds = AddS.getImage();
    private Police currentUser; // Store the logged-in police user
    
    /**
     * Custom JPanel that paints the background image.
     */
    // This panel just slaps a background image on the UI, looks kinda cool
    private class BackgroundPanel extends javax.swing.JPanel {
        private Image bgImage;
        public BackgroundPanel(Image img) {
            this.bgImage = img;
            setLayout(new java.awt.GridBagLayout()); // Use a layout manager for child panels

        }
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (bgImage != null) {
                g.drawImage(bgImage, 0, 0, getWidth(), getHeight(), this);
            } else {
                g.setColor(Color.PINK);
                g.fillRect(0, 0, getWidth(), getHeight());
                g.setColor(Color.BLACK);
                g.drawString("Background image not loaded", 20, 20);
            }
        }
    }

    /**
     * Creates new form GUIAPP
     */
    public GUIAPP() {
        Connection connection = DatabaseConnection.getConnection();
        this.policeDAO = new PoliceDAO(connection);
        Image bgImg = null;
        try {
            java.net.URL imgUrl = getClass().getResource("/background.png");
            if (imgUrl != null) {
                bgImg = new javax.swing.ImageIcon(imgUrl).getImage();
                System.out.println("Loaded background.png from resources.");
            } else {
                System.err.println("background.png not found in resources. Trying absolute path...");
                // Try absolute path as fallback (adjust path as needed)
                java.io.File absFile = new java.io.File("c:/Users/moham/Documents/GitHub/TrafficSystem/TrafficSystem/src/main/resources/background.png");
                if (absFile.exists()) {
                    bgImg = new javax.swing.ImageIcon(absFile.getAbsolutePath()).getImage();
                    System.out.println("Loaded background.png from absolute path: " + absFile.getAbsolutePath());
                } else {
                    System.err.println("background.png not found at absolute path either.");
                }
            }
        } catch (Exception e) {
            System.err.println("Error loading background image: " + e.getMessage());
        }
        BackgroundPanel bgPanel = new BackgroundPanel(bgImg);
        setContentPane(bgPanel);
        initComponents();
    }

    public void setOnLoginSuccess(java.util.function.Consumer<Police> onLoginSuccess) {
        this.onLoginSuccess = onLoginSuccess;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // This just sets up all the UI components, don't touch unless you wanna break stuff
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TrafficSystem = new javax.swing.JLayeredPane();
        loginPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        subtitleLabel = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPasswordField1 = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Traffic System Login");

        // Main panel styling
        TrafficSystem.setOpaque(false); // Make the layered pane transparent

        // Login panel styling
        loginPanel.setOpaque(false); // Make panel transparent
        loginPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(
            javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 220, 220), 1),
            javax.swing.BorderFactory.createEmptyBorder(30, 30, 30, 30)
        ));
        java.awt.GridBagLayout gbl = new java.awt.GridBagLayout();
        loginPanel.setLayout(gbl);
        java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
        gbc.gridx = 0; gbc.gridy = 0; gbc.gridwidth = 1; gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gbc.insets = new java.awt.Insets(0, 0, 15, 0);

        // Title label
        titleLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 32));
        titleLabel.setForeground(new java.awt.Color(33, 150, 243));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Welcome to the Traffic System");
        loginPanel.add(titleLabel, gbc);

        // Subtitle label
        gbc.gridy++;
        subtitleLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 16));
        subtitleLabel.setForeground(new java.awt.Color(100, 100, 100));
        subtitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subtitleLabel.setText("Please log in to continue");
        loginPanel.add(subtitleLabel, gbc);

        // Username field
        gbc.gridy++;
        jTextField1.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 16));
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setBorder(javax.swing.BorderFactory.createCompoundBorder(
            javax.swing.BorderFactory.createLineBorder(new java.awt.Color(200, 200, 200), 2),
            javax.swing.BorderFactory.createEmptyBorder(8, 12, 8, 12)
        ));
        jTextField1.setToolTipText("Username");
        jTextField1.setPreferredSize(new java.awt.Dimension(250, 40));
        loginPanel.add(jTextField1, gbc);

        // Password field
        gbc.gridy++;
        jPasswordField1.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 16));
        jPasswordField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPasswordField1.setBorder(javax.swing.BorderFactory.createCompoundBorder(
            javax.swing.BorderFactory.createLineBorder(new java.awt.Color(200, 200, 200), 2),
            javax.swing.BorderFactory.createEmptyBorder(8, 12, 8, 12)
        ));
        jPasswordField1.setToolTipText("Password");
        jPasswordField1.setPreferredSize(new java.awt.Dimension(250, 40));
        loginPanel.add(jPasswordField1, gbc);

        // Login button
        gbc.gridy++;
        jButton1.setBackground(new java.awt.Color(33, 150, 243));
        jButton1.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 18));
        jButton1.setForeground(java.awt.Color.WHITE);
        jButton1.setText("Log In");
        jButton1.setFocusPainted(false);
        jButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 10, 0));
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setPreferredSize(new java.awt.Dimension(250, 40));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        loginPanel.add(jButton1, gbc);

        // Center the login panel in the layered pane
        TrafficSystem.setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints centerGbc = new java.awt.GridBagConstraints();
        centerGbc.gridx = 0; centerGbc.gridy = 0;
        centerGbc.anchor = java.awt.GridBagConstraints.CENTER;
        TrafficSystem.add(loginPanel, centerGbc);

        // Set the main frame layout
        getContentPane().setLayout(new java.awt.BorderLayout());
        getContentPane().add(TrafficSystem, java.awt.BorderLayout.CENTER);
        setSize(1000, 750); 
        setResizable(false); // Not resizable
        // pack(); // REMOVE or comment out this line to prevent overriding setSize
        setMinimumSize(new java.awt.Dimension(400, 400));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String username = jTextField1.getText().trim();
        String password = new String(jPasswordField1.getPassword()).trim();

        Police user = policeDAO.authenticate(username, password);
        if (user != null) {
            javax.swing.JOptionPane.showMessageDialog(this, "Login successful!", "Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            this.currentUser = user; // Set the current user
            if (onLoginSuccess != null) {
                onLoginSuccess.accept(user);
            }
            initMainMenuPanel();
            TrafficSystem.remove(loginPanel); // Remove the login panel
            TrafficSystem.add(mainMenuPanel); // Add the main menu panel
            TrafficSystem.revalidate(); // Refresh the layout
            TrafficSystem.repaint(); // Repaint the container
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Invalid username or password.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void initMainMenuPanel() {
        mainMenuPanel = new javax.swing.JPanel();
        mainMenuPanel.setOpaque(false);
        mainMenuPanel.setLayout(new java.awt.GridLayout(8, 1, 15, 15));
        mainMenuPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));

        // Create paired panel for vehicle search buttons
        javax.swing.JPanel vehicleSearchPanel = new javax.swing.JPanel(new java.awt.GridLayout(1, 2, 8, 0));
        vehicleSearchPanel.setOpaque(false);
        searchVehicleButton = createStyledButton("Search Vehicle by Plate Number");
        searchVehicleByQRCodeButton = createStyledButton("Search Vehicle by QR Code");
        java.awt.Color qrBtnColor = new java.awt.Color(76, 175, 80); // Green
        searchVehicleByQRCodeButton.setBackground(qrBtnColor);
        searchVehicleByQRCodeButton.setForeground(java.awt.Color.WHITE);
        searchVehicleByQRCodeButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 16));
        searchVehicleByQRCodeButton.setFocusPainted(false);
        searchVehicleByQRCodeButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(56, 142, 60), 2));
        searchVehicleByQRCodeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        searchVehicleByQRCodeButton.setPreferredSize(new java.awt.Dimension(350, 50));
        searchVehicleButton.setPreferredSize(new java.awt.Dimension(350, 50));
        searchVehicleButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 16));
        vehicleSearchPanel.add(searchVehicleButton);
        vehicleSearchPanel.add(searchVehicleByQRCodeButton);
        searchVehicleButton.addActionListener(evt -> searchVehicleByPlate());
        searchVehicleByQRCodeButton.addActionListener(evt -> searchVehicleByQRCode());

        // Create paired panel for person search buttons
        javax.swing.JPanel personSearchPanel = new javax.swing.JPanel(new java.awt.GridLayout(1, 2, 8, 0));
        personSearchPanel.setOpaque(false);
        searchPersonButton = createStyledButton("Search Person by National ID");
        searchPersonByQRCodeButton = createStyledButton("Search Person by QR Code");
        searchPersonByQRCodeButton.setBackground(qrBtnColor);
        searchPersonByQRCodeButton.setForeground(java.awt.Color.WHITE);
        searchPersonByQRCodeButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 16));
        searchPersonByQRCodeButton.setFocusPainted(false);
        searchPersonByQRCodeButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(56, 142, 60), 2));
        searchPersonByQRCodeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        searchPersonByQRCodeButton.setPreferredSize(new java.awt.Dimension(350, 50));
        searchPersonButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 16));
        searchPersonButton.setPreferredSize(new java.awt.Dimension(350, 50));
        personSearchPanel.add(searchPersonButton);
        personSearchPanel.add(searchPersonByQRCodeButton);
        searchPersonButton.addActionListener(evt -> searchPersonByNationalId());
        searchPersonByQRCodeButton.addActionListener(evt -> searchPersonByQRCode());

        createReportButton = createStyledButton("Create New Report");
        viewMyReportsButton = createStyledButton("View My Reports");
        viewAllReportsButton = createStyledButton("View All Reports");
        logoutButton = createStyledButton("Logout");
        javax.swing.JButton payReportFeesButton = createStyledButton("Pay Report Fees");
        javax.swing.JButton exitButton = createStyledButton("Exit");
    

        // Clear and add only the allowed buttons for the user's rank
        mainMenuPanel.removeAll();
        int rank = (currentUser != null) ? currentUser.getRankLevel() : 0;
        if (rank == 1) {
            mainMenuPanel.add(vehicleSearchPanel);
            mainMenuPanel.add(personSearchPanel);
            mainMenuPanel.add(createReportButton);
            mainMenuPanel.add(viewMyReportsButton);
            mainMenuPanel.add(viewAllReportsButton);
            mainMenuPanel.add(logoutButton);
            mainMenuPanel.add(exitButton);
        } else if (rank == 2) {
            mainMenuPanel.add(vehicleSearchPanel);
            mainMenuPanel.add(logoutButton);
            mainMenuPanel.add(exitButton);
        } else if (rank == 3) {
            mainMenuPanel.add(personSearchPanel);
            mainMenuPanel.add(logoutButton);
            mainMenuPanel.add(exitButton);
        } else {
            mainMenuPanel.add(vehicleSearchPanel);
            mainMenuPanel.add(personSearchPanel);
            mainMenuPanel.add(createReportButton);
            mainMenuPanel.add(viewMyReportsButton);
            mainMenuPanel.add(logoutButton);
            mainMenuPanel.add(exitButton);
        }

        // Add missing action listeners for the other buttons
        createReportButton.addActionListener(evt -> createNewReport());
        viewMyReportsButton.addActionListener(evt -> viewMyReports());
        viewAllReportsButton.addActionListener(evt -> viewAllReports());
        logoutButton.addActionListener(evt -> logout());
        payReportFeesButton.addActionListener(evt -> payReportFees());
        exitButton.addActionListener(evt -> {
            int confirm = javax.swing.JOptionPane.showConfirmDialog(this, "Are you sure you want to exit?", "Exit", javax.swing.JOptionPane.YES_NO_OPTION);
            if (confirm == javax.swing.JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        });

    }

    private javax.swing.JButton createStyledButton(String text) {
        javax.swing.JButton button = new javax.swing.JButton(text);
        button.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 16));
        button.setBackground(new java.awt.Color(33, 150, 243));
        button.setForeground(java.awt.Color.WHITE);
        button.setFocusPainted(false);
        button.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        return button;
    }

    private void showStyledMessageDialog(String message, String title, int messageType) {
        javax.swing.UIManager.put("OptionPane.messageFont", new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
        javax.swing.UIManager.put("OptionPane.buttonFont", new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 14));
        javax.swing.JOptionPane.showMessageDialog(this, message, title, messageType);
    }

    private int showStyledConfirmDialog(javax.swing.JPanel panel, String title) {
        javax.swing.UIManager.put("OptionPane.messageFont", new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
        javax.swing.UIManager.put("OptionPane.buttonFont", new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 14));
        return javax.swing.JOptionPane.showConfirmDialog(this, panel, title, javax.swing.JOptionPane.OK_CANCEL_OPTION);
    }

    private void searchVehicleByPlate() {
        String plateNumber = javax.swing.JOptionPane.showInputDialog(this, "Enter plate number:");
        if (plateNumber != null) {
            List<Vehicle> vehicles = vehicleDAO.findByPlateNumber(plateNumber);
            if (!vehicles.isEmpty()) {
                for (Vehicle v : vehicles) {
                    StringBuilder vehicleTable = new StringBuilder("<html><body style='font-family:Segoe UI; font-size:14px;'>");
                    vehicleTable.append("<h3>Vehicle Information</h3>");
                    vehicleTable.append("<table border='1' style='border-collapse:collapse; width:100%;'>");
                    vehicleTable.append("<tr><th>Plate Number</th><th>Type</th><th>Color</th><th>Model</th><th>Year</th><th>Registration Number</th><th>Status</th><th>Fuel Type</th><th>Engine #</th><th>Chassis #</th><th>Seats</th><th>Reg Date</th><th>Expiry Date</th><th>Insurance</th><th>Ins Expiry</th><th>Location</th><th>Notes</th><th>Stolen?</th></tr>");
                    vehicleTable.append("<tr>")
                        .append("<td>").append(v.getPlateNumber()).append("</td>")
                        .append("<td>").append(v.getType()).append("</td>")
                        .append("<td>").append(v.getColor()).append("</td>")
                        .append("<td>").append(v.getModel()).append("</td>")
                        .append("<td>").append(v.getYear()).append("</td>")
                        .append("<td>").append(v.getRegistrationNumber()).append("</td>")
                        .append("<td>").append(v.getVehicleStatus()).append("</td>")
                        .append("<td>").append(v.getFuelType()).append("</td>")
                        .append("<td>").append(v.getEngineNumber()).append("</td>")
                        .append("<td>").append(v.getChassisNumber()).append("</td>")
                        .append("<td>").append(v.getSeats()).append("</td>")
                        .append("<td>").append(v.getRegistrationDate()).append("</td>")
                        .append("<td>").append(v.getExpiryDate()).append("</td>")
                        .append("<td>").append(v.getInsuranceProvider()).append("</td>")
                        .append("<td>").append(v.getInsuranceExpiry()).append("</td>")
                        .append("<td>").append(v.getCurrentLocation()).append("</td>")
                        .append("<td>").append(v.getNotes()).append("</td>")

                        .append("</tr>");
                    vehicleTable.append("</table>");

                    String ownerName = policeDAO.getOwnerNameById(v.getOwnerId());
                    String ownerNationalId = policeDAO.getOwnerNationalIdById(v.getOwnerId());
                    Person owner = personDAO.findById(v.getOwnerId());
                    vehicleTable.append("<br><h3>Owner Information</h3>");
                    vehicleTable.append("<table border='1' style='border-collapse:collapse; width:100%;'>");
                    vehicleTable.append("<tr><th>Name</th><th>National ID</th><th>Gender</th><th>DOB</th><th>Blood Type</th><th>Address</th><th>Phone</th><th>Email</th><th>Emergency Contact</th><th>Criminal Status</th></tr>");
                    vehicleTable.append("<tr>")
                        .append("<td>").append(ownerName).append("</td>")
                        .append("<td>").append(ownerNationalId).append("</td>")
                        .append("<td>").append(owner != null ? owner.getGender() : "").append("</td>")
                        .append("<td>").append(owner != null ? owner.getDateOfBirth() : "").append("</td>")
                        .append("<td>").append(owner != null ? owner.getBloodType() : "").append("</td>")
                        .append("<td>").append(owner != null ? owner.getAddress() : "").append("</td>")
                        .append("<td>").append(owner != null ? owner.getPhoneNumber() : "").append("</td>")
                        .append("<td>").append(owner != null ? owner.getEmail() : "").append("</td>")
                        .append("<td>").append(owner != null ? owner.getEmergencyContact() : "").append("</td>")

                        .append("</tr>");
                    vehicleTable.append("</table></body></html>");

                    javax.swing.JLabel resultLabel = new javax.swing.JLabel(vehicleTable.toString());
                    resultLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
                    javax.swing.JOptionPane.showMessageDialog(this, resultLabel, "Vehicle & Owner Info", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                showStyledMessageDialog("No vehicles found with that plate number.", "Search Results", javax.swing.JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    private void searchVehicleByQRCode() {
        String qrCode = scanQRCode();
        if (qrCode != null) {
            List<Vehicle> vehicles = vehicleDAO.findByQRCode(qrCode);
            if (!vehicles.isEmpty()) {
                StringBuilder result = new StringBuilder("<html><body style='font-family:Segoe UI; font-size:14px;'>");
                result.append("<h3>Vehicles Found:</h3><table border='1' style='border-collapse:collapse; width:100%;'>");
                result.append("<tr><th>Plate Number</th><th>Owner Name</th><th>Owner National ID</th><th>Car Type</th><th>Color</th><th>Model</th><th>Year</th><th>Registration #</th><th>Fuel</th><th>Engine #</th><th>Chassis #</th><th>Seats</th><th>Status</th><th>Reg Date</th><th>Expiry</th><th>Insurance</th><th>Ins Expiry</th><th>Location</th><th>Notes</th><th>Stolen?</th><th>Reports</th></tr>");
                for (Vehicle v : vehicles) {
    String ownerName = policeDAO.getOwnerNameById(v.getOwnerId());
    String ownerNationalId = policeDAO.getOwnerNationalIdById(v.getOwnerId());
    List<Report> reports = policeDAO.getReportsByVehicleId(v.getVehicleId());
    String reportStatus = reports.isEmpty() ? "No Reports" : "Has Reports";
    String reportColor = reports.isEmpty() ? "green" : "red";
    result.append("<tr>")
          .append("<td>").append(v.getPlateNumber()).append("</td>")
          .append("<td>").append(ownerName).append("</td>")
          .append("<td>").append(ownerNationalId).append("</td>")
          .append("<td>").append(v.getType()).append("</td>")
          .append("<td>").append(v.getColor()).append("</td>")
          .append("<td>").append(v.getModel()).append("</td>")
          .append("<td>").append(v.getYear()).append("</td>")
          .append("<td>").append(v.getRegistrationNumber()).append("</td>")
          .append("<td>").append(v.getFuelType()).append("</td>")
          .append("<td>").append(v.getEngineNumber()).append("</td>")
          .append("<td>").append(v.getChassisNumber()).append("</td>")
          .append("<td>").append(v.getSeats()).append("</td>")
          .append("<td>").append(v.getVehicleStatus()).append("</td>")
          .append("<td>").append(v.getRegistrationDate()).append("</td>")
          .append("<td>").append(v.getExpiryDate()).append("</td>")
          .append("<td>").append(v.getInsuranceProvider()).append("</td>")
          .append("<td>").append(v.getInsuranceExpiry()).append("</td>")
          .append("<td>").append(v.getCurrentLocation()).append("</td>")
          .append("<td>").append(v.getNotes()).append("</td>")

          .append("<td style='color:").append(reportColor).append(";'>").append(reportStatus).append("</td>")
          .append("</tr>");
}
result.append("</table></body></html>");
javax.swing.JLabel resultLabel = new javax.swing.JLabel(result.toString());
resultLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
javax.swing.JOptionPane.showMessageDialog(this, resultLabel, "Search Results", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            } else {
                showStyledMessageDialog("No vehicles found with that QR code.", "Search Results", javax.swing.JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    private void searchPersonByNationalId() {
        String nationalId = javax.swing.JOptionPane.showInputDialog(this, "Enter national ID:");
        if (nationalId != null) {
            Object result = policeDAO.findPersonByNationalId(nationalId);
            if (result != null && result instanceof Person) {
                Person person = (Person) result;
                List<Report> reports = policeDAO.getReportsByPersonId(person.getPersonId());

                StringBuilder resultBuilder = new StringBuilder("<html><body style='font-family:Segoe UI; font-size:14px;'>");
                resultBuilder.append("<h3>Person Details:</h3>")
                             .append("<table border='1' style='border-collapse:collapse; width:100%;'>")
                             .append("<tr><th>Name</th><th>National ID</th><th>Gender</th><th>DOB</th><th>Blood Type</th><th>Address</th><th>Phone</th><th>Email</th><th>Emergency Contact</th><th>Criminal Status</th></tr>")
                             .append("<tr>")
                             .append("<td>").append(person.getName()).append("</td>")
                             .append("<td>").append(person.getNationalId()).append("</td>")
                             .append("<td>").append(person.getGender()).append("</td>")
                             .append("<td>").append(person.getDateOfBirth()).append("</td>")
                             .append("<td>").append(person.getBloodType()).append("</td>")
                             .append("<td>").append(person.getAddress()).append("</td>")
                             .append("<td>").append(person.getPhoneNumber()).append("</td>")
                             .append("<td>").append(person.getEmail()).append("</td>")
                             .append("<td>").append(person.getEmergencyContact()).append("</td>")

                             .append("</tr></table>");

                // Show driver or police info if available
                Driver driver = null;
                Police police = null;
                try { driver = (Driver) person; } catch (Exception ignored) {}
                try { police = (Police) person; } catch (Exception ignored) {}
                if (driver != null) {
                    resultBuilder.append("<br><h3>Driver License Info</h3>")
                        .append("<table border='1' style='border-collapse:collapse; width:100%;'>")
                        .append("<tr><th>License #</th><th>Issue Date</th><th>Expiry</th><th>Type</th><th>Status</th><th>Points</th><th>Restrictions</th><th>Total Violations</th></tr>")
                        .append("<tr>")
                        .append("<td>").append(driver.getLicenseNumber()).append("</td>")
                        .append("<td>").append(driver.getLicenseIssueDate()).append("</td>")
                        .append("<td>").append(driver.getLicenseExpiryDate()).append("</td>")
                        .append("<td>").append(driver.getLicenseType()).append("</td>")
                        .append("<td>").append(driver.getStatus()).append("</td>")
                        .append("<td>").append(driver.getPoints()).append("</td>")
                        .append("<td>").append(driver.getRestrictions()).append("</td>")
                        .append("<td>").append(driver.getTotalViolations()).append("</td>")
                        .append("</tr></table>");
                }
                if (police != null) {
                    resultBuilder.append("<br><h3>Police Info</h3>")
                        .append("<table border='1' style='border-collapse:collapse; width:100%;'>")
                        .append("<tr><th>Badge #</th><th>Rank</th><th>Department</th><th>Username</th><th>Status</th><th>Specialization</th><th>Rank Level</th></tr>")
                        .append("<tr>")
                        .append("<td>").append(police.getBadgeNumber()).append("</td>")
                        .append("<td>").append(police.getRank()).append("</td>")
                        .append("<td>").append(police.getDepartment()).append("</td>")
                        .append("<td>").append(police.getUsername()).append("</td>")
                        .append("<td>").append(police.getStatus()).append("</td>")
                        .append("<td>").append(police.getSpecialization()).append("</td>")
                        .append("<td>").append(police.getRankLevel()).append("</td>")
                        .append("</tr></table>");
                }

                resultBuilder.append("<h3>Associated Reports:</h3>")
                             .append("<table border='1' style='border-collapse:collapse; width:100%;'>")
                             .append("<tr><th>Report ID</th><th>Violation Type</th><th>Status</th><th>Date</th><th>Fine</th><th>Points Deducted</th><th>Paid?</th></tr>");

                for (Report report : reports) {
                    resultBuilder.append("<tr>")
                        .append("<td>").append(report.getReportId()).append("</td>")
                        .append("<td>").append(report.getViolationType()).append("</td>")
                        .append("<td>").append(report.getStatus()).append("</td>")
                        .append("<td>").append(report.getReportDate()).append("</td>")
                        .append("<td>").append(report.getFine()).append("</td>")
                        .append("<td>").append(report.getPointsDeducted()).append("</td>")
                        .append("<td>").append(report.isPaid() ? "Yes" : "No").append("</td>")
                        .append("</tr>");
                }

                resultBuilder.append("</table></body></html>");

                javax.swing.JLabel resultLabel = new javax.swing.JLabel(resultBuilder.toString());
                resultLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
                javax.swing.JOptionPane.showMessageDialog(this, resultLabel, "Search Results", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            } else {
                showStyledMessageDialog("No person found with that national ID.", "Search Results", javax.swing.JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    private void searchPersonByQRCode() {
        String qrCode = scanQRCode();
        if (qrCode != null) {
            Person person = policeDAO.findPersonByQRCode(qrCode);
            if (person != null) {
                List<Report> reports = policeDAO.getReportsByPersonId(person.getPersonId());
                StringBuilder resultBuilder = new StringBuilder("<html><body style='font-family:Segoe UI; font-size:14px;'>");
                resultBuilder.append("<h3>Person Details:</h3>")
                             .append("<p>Name: ").append(person.getFirstName()).append(" ").append(person.getLastName()).append("</p>")
                             .append("<p>National ID: ").append(person.getNationalId()).append("</p>")
                             .append("<p>Address: ").append(person.getAddress()).append("</p>");
                resultBuilder.append("<h3>Associated Reports:</h3>")
                             .append("<table border='1' style='border-collapse:collapse; width:100%;'>")
                             .append("<tr><th>Report ID</th><th>Violation Type</th><th>Status</th></tr>");
                for (Report report : reports) {
                    String reportColor = report.getStatus().equalsIgnoreCase("No Reports") ? "green" : "red";
                    String paymentStatus = report.isPaid() ? "Paid" : "Pending";
                    resultBuilder.append("<tr>")
                                 .append("<td>").append(report.getReportId()).append("</td>")
                                 .append("<td>").append(report.getViolationType()).append("</td>")
                                 .append("<td style='color:").append(reportColor).append(";'>").append(report.getStatus()).append(" (" + paymentStatus + ")").append("</td>")
                                 .append("</tr>");
                }
                resultBuilder.append("</table></body></html>");
                javax.swing.JLabel resultLabel = new javax.swing.JLabel(resultBuilder.toString());
                resultLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
                javax.swing.JOptionPane.showMessageDialog(this, resultLabel, "Search Results", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            } else {
                showStyledMessageDialog("No person found with that QR code.", "Search Results", javax.swing.JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    private String scanQRCode() {
        try {
            return QRCodeScanner.scanAndReturnResult();
        } catch (Exception e) {
            showStyledMessageDialog("Error scanning QR code: " + e.getMessage(), "QR Code Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }

    private void createNewReport() {
        javax.swing.JPanel panel = new javax.swing.JPanel(new java.awt.GridLayout(9, 2, 10, 10));
        panel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));

        javax.swing.JTextField driverIdField = new javax.swing.JTextField();
        javax.swing.JTextField vehicleIdField = new javax.swing.JTextField();
        javax.swing.JTextField violationTypeField = new javax.swing.JTextField();
        javax.swing.JTextField locationField = new javax.swing.JTextField();
        javax.swing.JTextField descriptionField = new javax.swing.JTextField();
        javax.swing.JTextField fineField = new javax.swing.JTextField();
        javax.swing.JTextField pointsField = new javax.swing.JTextField();
        javax.swing.JComboBox<String> reportTypeComboBox = new javax.swing.JComboBox<>(new String[]{"Regular", "Stolen", "Lost"});

        panel.add(new javax.swing.JLabel("Driver ID:"));
        panel.add(driverIdField);
        panel.add(new javax.swing.JLabel("Vehicle ID:"));
        panel.add(vehicleIdField);
        panel.add(new javax.swing.JLabel("Violation Type:"));
        panel.add(violationTypeField);
        panel.add(new javax.swing.JLabel("Location:"));
        panel.add(locationField);
        panel.add(new javax.swing.JLabel("Description:"));
        panel.add(descriptionField);
        panel.add(new javax.swing.JLabel("Fine Amount:"));
        panel.add(fineField);
        panel.add(new javax.swing.JLabel("Points to Deduct:"));
        panel.add(pointsField);
        panel.add(new javax.swing.JLabel("Report Type:"));
        panel.add(reportTypeComboBox);

        int result = showStyledConfirmDialog(panel, "Create New Report");
        if (result == javax.swing.JOptionPane.OK_OPTION) {
            try {
                int driverId = Integer.parseInt(driverIdField.getText().trim());
                int vehicleId = Integer.parseInt(vehicleIdField.getText().trim());
                String violationType = violationTypeField.getText().trim();
                String location = locationField.getText().trim();
                String description = descriptionField.getText().trim();
                double fine = Double.parseDouble(fineField.getText().trim());
                int points = Integer.parseInt(pointsField.getText().trim());
                String reportType = (String) reportTypeComboBox.getSelectedItem();

                if (violationType.isEmpty() || location.isEmpty() || description.isEmpty()) {
                    throw new IllegalArgumentException("All text fields must be filled.");
                }

                String confirmationMessage = String.format(
                    "<html><body style='font-family:Segoe UI; font-size:14px;'>"+
                    "<h3>Confirm Report Details:</h3>"+
                    "<p>Driver ID: %d</p>"+
                    "<p>Vehicle ID: %d</p>"+
                    "<p>Violation Type: %s</p>"+
                    "<p>Location: %s</p>"+
                    "<p>Description: %s</p>"+
                    "<p>Fine Amount: %.2f</p>"+
                    "<p>Points to Deduct: %d</p>"+
                    "<p>Report Type: %s</p>"+
                    "</body></html>",
                    driverId, vehicleId, violationType, location, description, fine, points, reportType
                );

                int confirm = javax.swing.JOptionPane.showConfirmDialog(this, new javax.swing.JLabel(confirmationMessage), "Confirm Report", javax.swing.JOptionPane.OK_CANCEL_OPTION);
                if (confirm == javax.swing.JOptionPane.OK_OPTION) {
                    Report report = new Report();
                    report.setPoliceId(currentUser != null ? currentUser.getPersonId() : 1);
                    report.setDriverId(driverId);
                    report.setVehicleId(vehicleId);
                    report.setViolationType(violationType);
                    report.setLocation(location);
                    report.setDescription(description);
                    report.setFine(fine);
                    report.setPointsDeducted(points);
                    report.setReportDate(new java.util.Date());
                    report.setStatus("Pending");
                    report.setPaid(false);
                    report.setReportType(reportType); 
                    report.setDueDate(new java.util.Date()); 

                    if (policeDAO.createReport(report)) {
                        showStyledMessageDialog("Report created successfully.", "Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        showStyledMessageDialog("Failed to create report.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (NumberFormatException e) {
                showStyledMessageDialog("Invalid input. Please enter valid numbers for Driver ID, Vehicle ID, Fine, and Points.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            } catch (IllegalArgumentException e) {
                showStyledMessageDialog(e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void viewMyReports() {
        try {
            int policeId = (currentUser != null) ? currentUser.getPersonId() : 1;
            List<Report> reports = policeDAO.getReportsByPoliceId(policeId); 
            if (reports != null && !reports.isEmpty()) {
                StringBuilder result = new StringBuilder("Your Reports:\n\n");
                for (Report report : reports) {
                    result.append(report.toString()).append("\n\n");
                }
                javax.swing.JOptionPane.showMessageDialog(this, result.toString(), "My Reports", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "No reports found.", "My Reports", javax.swing.JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "An error occurred while fetching reports: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }

    private void viewAllReports() {
        List<Report> reports = policeDAO.getAllReports();
        if (!reports.isEmpty()) {
            StringBuilder result = new StringBuilder("<html><body style='font-family:Segoe UI; font-size:14px;'>");
            result.append("<h3>All Reports:</h3><table border='1' style='border-collapse:collapse; width:100%;'>");
            result.append("<tr><th>Report ID</th><th>Driver ID</th><th>Vehicle ID</th><th>Violation Type</th><th>Status</th><th>Fine</th><th>Points Deducted</th><th>Report Date</th></tr>");

            for (Report report : reports) {
                String statusColor = report.getStatus().equalsIgnoreCase("Pending") ? "orange" : "green";
                result.append("<tr>")
                      .append("<td>").append(report.getReportId()).append("</td>")
                      .append("<td>").append(report.getDriverId()).append("</td>")
                      .append("<td>").append(report.getVehicleId()).append("</td>")
                      .append("<td>").append(report.getViolationType()).append("</td>")
                      .append("<td style='color:").append(statusColor).append(";'>").append(report.getStatus()).append("</td>")
                      .append("<td>").append(report.getFine()).append("</td>")
                      .append("<td>").append(report.getPointsDeducted()).append("</td>")
                      .append("<td>").append(report.getReportDate()).append("</td>")
                      .append("</tr>");
            }

            result.append("</table></body></html>");
            javax.swing.JLabel resultLabel = new javax.swing.JLabel(result.toString());
            resultLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
            javax.swing.JOptionPane.showMessageDialog(this, resultLabel, "All Reports", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "No reports found.", "All Reports", javax.swing.JOptionPane.WARNING_MESSAGE);
        }
    }

    private void payReportFees() {
        // Fetch unpaid report IDs
        List<Integer> unpaidReportIds = policeDAO.getUnpaidReportIds();
        if (unpaidReportIds == null || unpaidReportIds.isEmpty()) {
            showStyledMessageDialog("No unpaid reports found.", "Pay Report Fees", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 15));

        JLabel titleLabel = new JLabel("Pay Report Fees", JLabel.CENTER);
        titleLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 20));
        titleLabel.setForeground(new java.awt.Color(33, 150, 243));
        panel.add(titleLabel, BorderLayout.NORTH);

        JPanel formPanel = new JPanel(new GridLayout(2, 2, 10, 10));
        JLabel selectLabel = new JLabel("Select Report ID:");
        selectLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 16));
        formPanel.add(selectLabel);

        JComboBox<Integer> reportDropdown = new JComboBox<>();
        for (Integer id : unpaidReportIds) {
            reportDropdown.addItem(id);
        }
        reportDropdown.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 16));
        formPanel.add(reportDropdown);
        panel.add(formPanel, BorderLayout.CENTER);

        // Info panel to show report details
        JPanel infoPanel = new JPanel(new GridLayout(0, 1, 5, 5));
        infoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Report Details"));
        panel.add(infoPanel, BorderLayout.SOUTH);

        JButton payButton = new JButton("Pay");
        payButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 16));
        payButton.setBackground(new java.awt.Color(33, 150, 243));
        payButton.setForeground(java.awt.Color.WHITE);
        payButton.setFocusPainted(false);
        payButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        payButton.setEnabled(false);

        // Update info panel when a report is selected
        reportDropdown.addActionListener(e -> {
            infoPanel.removeAll();
            Integer selectedId = (Integer) reportDropdown.getSelectedItem();
            if (selectedId != null) {
                Report report = policeDAO.getReportById(selectedId);
                if (report != null) {
                    infoPanel.add(new JLabel("Violation Type: " + report.getViolationType()));
                    infoPanel.add(new JLabel("Fine: " + report.getFine()));
                    infoPanel.add(new JLabel("Status: " + report.getStatus()));
                    infoPanel.add(new JLabel("Points Deducted: " + report.getPointsDeducted()));
                    infoPanel.add(new JLabel("Report Date: " + report.getReportDate()));
                    payButton.setEnabled(true);
                } else {
                    infoPanel.add(new JLabel("Report details not found."));
                    payButton.setEnabled(false);
                }
            } else {
                payButton.setEnabled(false);
            }
            infoPanel.revalidate();
            infoPanel.repaint();
        });

        // Trigger initial info display
        if (reportDropdown.getItemCount() > 0) {
            reportDropdown.setSelectedIndex(0);
        }

        payButton.addActionListener(e -> {
            Integer selectedReportId = (Integer) reportDropdown.getSelectedItem();
            if (selectedReportId != null) {
                boolean success = policeDAO.payReportFees(selectedReportId);
                if (success) {
                    showStyledMessageDialog("Payment successful for Report ID: " + selectedReportId, "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    showStyledMessageDialog("Payment failed. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(payButton);
        panel.add(buttonPanel, BorderLayout.PAGE_END);

        JOptionPane.showMessageDialog(this, panel, "Pay Report Fees", JOptionPane.PLAIN_MESSAGE);
    }

  

    private void logout() {
        // Implementation for logout
        javax.swing.JOptionPane.showMessageDialog(this, "Logging out...");
        this.dispose();
        new GUIAPP().setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    // Main method, just runs the app
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIAPP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIAPP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIAPP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIAPP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIAPP().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane TrafficSystem;
    private javax.swing.JButton jButton1;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel subtitleLabel;
    private javax.swing.JPanel loginPanel;
    // End of variables declaration//GEN-END:variables
}
